---
- name: "Add an /etc/hosts entry for your IP address"
  ansible.builtin.template:
    src: "./template/hosts"
    dest: "/etc/hosts"
    backup: "yes"
        
- name: "Add the Proxmox VE repository key as root"
  command: "wget https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg"
    
- name: add pve-no-subscription repo
  apt_repository:
    repo: "deb [arch=amd64] http://download.proxmox.com/debian/pve bookworm pve-no-subscription"
    state: present
    filename: 'pve-install-repo'

- name: "Update your repository and system by running:"
  apt:
    update_cache: "yes"
    upgrade: "dist"

- name: "/etc/network/interfaces edit"
  ansible.builtin.template:
    backup: "yes"
    src: "./template/interfaces"
    dest: "/etc/network/interfaces"
    owner: root
    group: root
    mode: 0644

- name: "Install other packages"
  apt:
    name: "{{ item }}"
    update_cache: "yes"
    state: "latest"
    install_recommends: "yes"
  with_items:
  - bridge-utils
  - postfix
  - open-iscsi
  - chrony

- name: "Install the Proxmox VE Kernel"
  apt:
    name: proxmox-default-kernel
    update_cache: "yes"
    state: "latest"
    install_recommends: "yes"
  register: kernel_update

- name: "Reboot"
  shell: nohup bash -c "sleep 2s && reboot" &
  when: kernel_update.changed
  async: 0
  poll: 0
  ignore_errors: true
  register: reboot      
      
- name: Wait for the host to finish rebooting
  local_action: wait_for host={{ inventory_hostname }} port=22 delay=20 connect_timeout=900
  become: false
  delegate_to: localhost
  when: reboot.changed

- name: "Install other packages"
  apt:
    name: "{{ item }}"
    update_cache: "yes"
    state: "latest"
    install_recommends: "yes"
  with_items:
  - proxmox-ve

- name: "off enterprise repository"
  lineinfile:
    path: "/etc/apt/sources.list.d/pve-enterprise.list"
    regex: "deb https://.*"
    line: "#deb https://enterprise.proxmox.com/debian/pve bullseye pve-enterprise"
    state: "present"

- name: "Remove the os-prober Package"
  apt:
    name: "os-prober"
    state: "absent"

- name: search for standard kernels
  shell: "$( which dpkg ) --get-selections linux-image* | $( which grep ) -i install | $(which awk) '{print $1}'"
  args:
    executable: /bin/bash
  register: standart_kernels_installed

- name: remove standart kernels
  apt:
    name: "{{ item }}"
    state: absent
  with_items: "{{ standart_kernels_installed.stdout_lines|default([]) }}"

- name: "Update GRUB"
  command: "update-grub"

- name: "rebooting the server"
  shell: nohup bash -c "sleep 2s && reboot" &
  async: 0
  poll: 0
  ignore_errors: yes
  register: reboot
  tags: reboot
...